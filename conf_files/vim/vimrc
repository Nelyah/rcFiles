set nocompatible               " Be iMproved
filetype off                  " required

" Required:
set rtp+=$HOME/.vim/bundle/Vundle.vim

" Required:
call vundle#begin()

" Required:
    Plugin 'VundleVim/Vundle.vim'

    Plugin 'Shougo/vimproc.vim', {'build': 'make'}
    Plugin 'kien/ctrlp.vim'                        " Fuzzy search for files in directory
    " Plugin 'lifepillar/vim-mucomplete'                " auto completion
    Plugin 'roxma/nvim-completion-manager'
    Plugin 'davidhalter/jedi-vim'                " auto completion

    Plugin 'w0rp/ale' " lint checker

    Plugin 'flazz/vim-colorschemes'
    Plugin 'vim-airline/vim-airline'               " line with useful infos
    Plugin 'vim-airline/vim-airline-themes'
    Plugin 'airblade/vim-gitgutter'                " git info on the left
    Plugin 'ap/vim-css-color'                      " Color highlighter
    Plugin 'altercation/vim-colors-solarized'      " Colour scheme
    Plugin 'joshdick/onedark.vim'                  " Colour scheme
    Plugin 'Yggdroot/indentLine'                   " Display indentation

    Plugin 'Raimondi/delimitMate'                  " For parenthesis

    " NERDtree loaded on toggle
    Plugin 'scrooloose/nerdtree'
    Plugin 'Xuyuanp/nerdtree-git-plugin'

    Plugin 'tmhedberg/SimpylFold'
    Plugin 'godlygeek/tabular'                        " Tabuliarise and align based on pattern

    Plugin 'sheerun/vim-polyglot'
    Plugin 'vim-python/python-syntax'

    Plugin 'tpope/vim-commentary'                  " comments based on the file type
    Plugin 'tpope/vim-surround'
    Plugin 'tpope/vim-sensible'
    Plugin 'tpope/vim-fugitive'

    Plugin 'def-lkb/vimbufsync'
    Plugin 'terryma/vim-expand-region'
    Plugin 'xolox/vim-misc'
    Plugin 'terryma/vim-multiple-cursors'
    Plugin 'marcweber/vim-addon-mw-utils'
    Plugin 'tomtom/tlib_vim'
    Plugin 'majutsushi/tagbar'

    Plugin 'SirVer/ultisnips'
    Plugin 'honza/vim-snippets'

call vundle#end()

" ------ Basic VIM modifications " ------ ""

set guioptions=M

set hidden " Allow background buffers without saving
set splitright

" set t_Co=256 
set number              " line numbers
hi CursorLineNr guifg=#dddddd
set encoding=utf-8

set autoindent
set autoread            " reload automatically a file if not changed

" Text wrapping
" set nowrap
" set textwidth=79
" set colorcolumn=80

" Search 
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set magic               " For regex
set ignorecase

" vim tmp files
set directory=$HOME/.vim/swap,/tmp
set backupdir=$HOME/.vim/backup,/tmp
set undodir=$HOME/.vim/undo,/tmp


" mapping the 'super' button on space
let mapleader = "\<Space>"

" Tab spec
set tabstop=4
set shiftwidth=4
set expandtab
set backspace=indent,eol,start

""" NetRW - VIM file explorer
let g:netrw_liststyle = 1 " Detail View
let g:netrw_sizestyle = "H" " Human-readable file sizes
" let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+' " hide dotfiles
" let g:netrw_hide = 1 " hide dotfiles by default
let g:netrw_banner = 0 " Turn off banner

""" Explore in vertical split
nnoremap <Leader>e :Explore! <enter>

syntax on
filetype plugin indent on

" Some remaps
noremap m l
noremap l k
noremap k j
noremap j h
noremap gV `[V`]

" Switching panes using the ctrl key
nnoremap <C-j> <C-w>h
nnoremap <C-k> <C-w>j
nnoremap <C-l> <C-w>k
nnoremap <C-m> <C-w>l
" Navigate display lines
noremap <silent> k gj
noremap <silent> l gk
noremap K 5j
noremap L 5k

" Saving
nnoremap <Leader>w :w<CR>

" Save the copy buffer
noremap <Leader>x "+

" Stupid window...
map q: :q

" Align blocks of texte and keep them selected
vmap < <gv
vmap > >gv

" ------ Buffer ------ "
nnoremap <Leader>j :bp<CR>
nnoremap <Leader>m :bn<CR>
nnoremap gl :ls<CR>
nnoremap gb :ls<CR>:b

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <Leader>q :bp <BAR> bd #<CR>

" Visual mode enhancements
nmap <Leader><Leader> V

" Turn off highlight after search
nnoremap <Leader>a :noh<return><CR>

" Color scheme
set background=dark
colorscheme onedark

if (has("nvim"))
    set termguicolors
endif

"""""""""""""""""""""""""""
"        PLUGINS          "
"""""""""""""""""""""""""""

" ------ ALE ------ "
" Prevents from continuously checking for errors
" and eating up battery
" let g:ale_lint_on_text_changed = 'never'
let g:ale_sign_column_always = 1
let g:ale_linters = {'python': ['flake8']}
let g:ale_fixers = {'python': ['remove_trailing_lines', 'trim_whitespace']}

" ------ NERDtree ------"
map <Leader>n :NERDtree

" ------ jedi-python ------"
let g:jedi#popup_on_dot = 0
map <Leader>b Oimport pdb; pdb.set_trace() # BREAKPOINT<C-c>

" ------ Airline Plugin ------ "
let g:airline_theme = 'bubblegum'
let g:airline#extensions#tabline#enabled = 1
set laststatus=2

" ------ CtrlP plugin ------ "
nnoremap <Leader>o :CtrlP<CR>
autocmd CompleteDone * pclose

" ------ Tagbar ------ "
nmap <F8> :TagbarToggle<CR>

" ------ Expand regions  ------ "
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)


" ------ Python folding  ------ "
" Be able to read doc
let g:SimpylFold_docstring_preview = 1

" ------ Git plugin ------ "
set diffopt+=vertical

" ------ Tabular ------ "
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>

" ------ Neo complete ------ "
set completeopt+=longest,menuone,noinsert,noselect
set shortmess+=c " Turn off completion messages

inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" ------ Ultisnips ------ "
let g:UltiSnipsExpandTrigger="<c-c>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" ------ VIM polyglot ------ "
let g:polyglot_disabled = ['python']

" ------ python-syntax ------ "
let g:python_highlight_all = 1

" ------ Useful function ------ "

" pasting doesn't replace paste buffer
function! RestoreRegister()
    let @" = s:restore_reg"
    return ''
endfunction
function! s:Repl()
    let s:restore_reg = @"
    return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let undo_dir = expand('$HOME/.vim/undo_dir')
    if !isdirectory(undo_dir)
        call mkdir(undo_dir, "", 0700)
    endif
    set undodir=$HOME/.vim/undo_dir
    set undofile
endif
