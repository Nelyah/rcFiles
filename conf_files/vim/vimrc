"dein Scripts-----------------------------
    set nocompatible               " Be iMproved


" Required:
set runtimepath+=~/.vim/dein/repos/github.com/Shougo/dein.vim
let g:dein#install_process_timeout = 300

" Required:
if dein#load_state(expand('~/.vim/dein'))
    call dein#begin(expand('~/.vim/dein'))                 " plugins' root path

" Let dein manage dein
" Required:
    call dein#add('Shougo/dein.vim')                       " Plugin manager

    call dein#add('Shougo/vimproc.vim', {'build': 'make'})
    call dein#add('lifepillar/vim-mucomplete')                " auto completion
    call dein#add('kien/ctrlp.vim')                        " Fuzzy search for files in directory

    call dein#add('w0rp/ale') " lint checker

    call dein#add('flazz/vim-colorschemes')
    call dein#add('vim-airline/vim-airline')               " line with useful infos
    call dein#add('vim-airline/vim-airline-themes')
    call dein#add('airblade/vim-gitgutter')                " git info on the left
    call dein#add('ap/vim-css-color')                      " Color highlighter
    call dein#add('Yggdroot/indentLine')                   " Display indentation

    call dein#add('Raimondi/delimitMate')                  " For parenthesis

    " NERDtree loaded on toggle
    call dein#add('scrooloose/nerdtree',
          \{'on_cmd': 'NERDTreeToggle'})
    call dein#add('Xuyuanp/nerdtree-git-plugin',
          \{'on_cmd': 'NERDTreeToggle'})

    call dein#add('tmhedberg/SimpylFold')
    call dein#add('godlygeek/tabular',
          \{ 'on_cmd' : [ 'Tab', 'Tabularize' ], 
          \'augroup' : 'tabular' })                         " Tabuliarise and align based on pattern

    call dein#add('sheerun/vim-polyglot')
    call dein#add('vim-python/python-syntax')

    call dein#add('tpope/vim-commentary')                  " comments based on the file type
    call dein#add('tpope/vim-surround')
    call dein#add('tpope/vim-sensible')
    call dein#add('tpope/vim-fugitive')

    call dein#add('majutsushi/tagbar')
    call dein#add('def-lkb/vimbufsync')
    call dein#add('terryma/vim-expand-region')
    call dein#add('xolox/vim-misc')
    call dein#add('terryma/vim-multiple-cursors')
    call dein#add('marcweber/vim-addon-mw-utils')
    call dein#add('tomtom/tlib_vim')
    call dein#add('majutsushi/tagbar')

    call dein#add('SirVer/ultisnips')
    call dein#add('honza/vim-snippets')

    call dein#end()
    call dein#save_state()
endif

"""""""""""""""""""""""""""
" Basic VIM modifications "
"""""""""""""""""""""""""""

set guioptions=M

set hidden " Allow background buffers without saving
set splitright

set t_Co=256 
set number              " line numbers
set encoding=utf-8

set autoindent
set autoread            " reload automatically a file if not changed

" Text wrapping
set nowrap
set textwidth=79
" set colorcolumn=80

" Search 
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set magic               " For regex
set ignorecase

" vim tmp files
set directory=~/.vim/swap,/tmp
set backupdir=~/.vim/backup,/tmp
set undodir=~/.vim/undo,/tmp


" mapping the 'super' button on space
let mapleader = "\<Space>"

" Tab spec
set tabstop=4
set shiftwidth=4
set expandtab
set backspace=indent,eol,start

""" NetRW - VIM file explorer
let g:netrw_liststyle = 1 " Detail View
let g:netrw_sizestyle = "H" " Human-readable file sizes
" let g:netrw_list_hide = '\(^\|\s\s\)\zs\.\S\+' " hide dotfiles
" let g:netrw_hide = 1 " hide dotfiles by default
let g:netrw_banner = 0 " Turn off banner

""" Explore in vertical split
nnoremap <Leader>e :Explore! <enter>

syntax on
filetype on
filetype plugin on

" Some remaps
noremap m l
noremap l k
noremap k j
noremap j h
noremap gV `[V`]

" Switching panes using the ctrl key
nnoremap <C-j> <C-w>h
nnoremap <C-k> <C-w>j
nnoremap <C-l> <C-w>k
nnoremap <C-m> <C-w>l

" Saving
nnoremap <Leader>w :w<CR>

" Save the copy buffer
noremap <Leader>x "+

" Stupid window...
map q: :q

" Buffers 
""""""""""
nnoremap <Leader>j :bp<CR>
nnoremap <Leader>m :bn<CR>
nnoremap gl :ls<CR>
nnoremap gb :ls<CR>:b

" Close the current buffer and move to the previous one
" This replicates the idea of closing a tab
nmap <Leader>q :bp <BAR> bd #<CR>

" Visual mode enhancements
nmap <Leader><Leader> V

" Turn off highlight after search
nnoremap <Leader>a :noh<return><CR>

" Color scheme
colorscheme ir_black

"""""""""""""""""""""""""""
"        PLUGINS          "
"""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""
" ale plugin (syntax checking)
" Prevents from continuously checking for errors
" and eating up battery
"""""""""""""""""""""""""""""""""
let g:ale_lint_on_text_changed = 'never'


"""""""""""""""""""""""""""""""""
" Airline Plugin
"""""""""""""""""""""""""""""""""
let g:airline_theme = 'bubblegum'
let g:airline#extensions#tabline#enabled = 1
set laststatus=2

" CtrlP plugin
nnoremap <Leader>o :CtrlP<CR>
autocmd CompleteDone * pclose

" pops Tagbar
nmap <F8> :TagbarToggle<CR>

" Expand regions 
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)


"Python folding plugin : To be able to read doc
let g:SimpylFold_docstring_preview = 1

" Git plugin
"""""""""""""
set diffopt+=vertical

""""""""""""""""""""""""""""""""""
" Tabular
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>

" Mu Complete Autocompletion
set completeopt=menuone,noinsert,noselect
set shortmess+=c " Turn off completion messages

inoremap <expr> <c-e> mucomplete#popup_exit("\<c-e>")
inoremap <expr> <c-y> mucomplete#popup_exit("\<c-y>")
inoremap <expr>  <cr> mucomplete#popup_exit("\<cr>")

let g:mucomplete#enable_auto_at_startup = 1
call add(g:mucomplete#chains['default'], 'ulti') " For Ultisnips completion

autocmd FileType python setlocal completeopt+=preview

" Ultisnips
let g:UltiSnipsExpandTrigger="<c-c>"
let g:UltiSnipsJumpForwardTrigger="<c-n>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" VIM polyglot
let g:polyglot_disabled = ['python']

" python-syntax
let g:python_highlight_all = 1

"""""""""""""""""""
" Useful function "
"""""""""""""""""""

" pasting doesn't replace paste buffer
function! RestoreRegister()
    let @" = s:restore_reg"
    return ''
endfunction
function! s:Repl()
    let s:restore_reg = @"
    return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent> <expr> p <sid>Repl()
